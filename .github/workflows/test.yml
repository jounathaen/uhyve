name: Build and test

on:
  pull_request:
  push:
    branches:
      - master
      - staging
      - trying
  schedule:
    - cron: '0 0 * * 6'

jobs:
  test:
    name: Multi-OS Cargo test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macOS-latest]
        rust: [nightly]
        include:
          - os: macOS-latest
            rust: 'nightly'
            components: 'rustfmt, clippy, rust-src'
            targets: 'x86_64-apple-darwin'
          - os: ubuntu-latest
            rust: 'nightly'
            components: 'rustfmt, clippy'
            targets: 'x86_64-unknown-linux-musl'
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
         rust-version: ${{ matrix.rust }}
         components: ${{ matrix.components || '' }}
         targets: ${{ matrix.targets || '' }}
    - uses: actions/checkout@v2.3.4
    - name: Check Cargo availability
      run: cargo --version
    - name: Test
      run: |
        # Don't run integration tests here, as they require KVM
         cargo test --lib -- --nocapture
         cargo test --doc -- --nocapture


  build-docker:
    runs-on: [self-hosted]
    steps:
        - uses: actions/checkout@v1
        - name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERUSER }}
            password: ${{ secrets.DOCKERTOKEN }}
        - run: echo $GITHUB_WORKSPACE
        - name: Build the tagged Docker image
          run: docker build . --file Dockerfile --tag docker.io/hermitcore/uhyve-ci:latest  --build-arg ci_project_dir=$GITHUB_WORKSPACE
        - name: Push the tagged Docker image
          run: docker push docker.io/hermitcore/uhyve-ci:latest

  kvm-full-test-suite:
    name: Rusty-Hermit Unit & KVM integration Tests
    runs-on: [self-hosted]
    needs: build-docker
    container:
      image: docker.io/hermitcore/uhyve-ci:latest
      options: '--device /dev/kvm'

    steps:
    #- uses: hecrj/setup-rust-action@v1
      #with:
         #rust-version: nightly
         #components: 'rustfmt, clippy'
         #targets: 'x86_64-unknown-linux-gnu'
    - run: echo $GITHUB_WORKSPACE
    - run: pwd
    - run: ls -la
    - uses: actions/checkout@v2.3.4
      with:
         clean: 'false'
    - name: Check Cargo availability
      run: cargo --version
    - name: Integration Tests
      run: cargo test
    - name: Generate integration test coverage
      run: |
        ./generate_test_coverage.sh --print-coverage
    - name: Generate unit test coverage
      run: |
        bash <(curl -s https://codecov.io/bash) -f
    - uses: codecov/codecov-action@v1.5.0
      with:
        files: ./coveralls.json


  fmt-check:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: 'nightly'
          components: 'rustfmt'
          targets: 'x86_64-unknown-linux-gnu'
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Check Formatting
        run: cargo fmt -- --check
      - name: Check Integration Test Formatting
        working-directory: ./tests/test-kernels
        run: cargo fmt -- --check
